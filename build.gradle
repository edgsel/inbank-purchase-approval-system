import java.time.Year
import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id "java"
    id "org.springframework.boot" version "3.4.4"
    id "io.spring.dependency-management" version "1.1.7"
    id "org.openapi.generator" version "7.12.0"
    id "application"
}

group = "ee.inbank"
version = "1.0.0"

application {
    mainClass = "ee.inbank.pas.PurchaseApprovalSystemApplication"
}

compileJava.dependsOn tasks.openApiGenerate

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$projectDir/src/main/resources/api/openapi.yml".toString()
    outputDir = "$buildDir/generated"
    apiPackage = "ee.inbank.api"
    modelPackage = "ee.inbank.model"
    configOptions = [
        dateLibrary                   : "java8",
        java8                         : "true",
        openApiNullable               : "false",
        useJakartaEe                  : "true",
        additionalModelTypeAnnotations: "@lombok.Builder;"
    ]
}

sourceSets {
    main {
        java {
            srcDirs "$buildDir/generated/src/main/java"
        }
    }
    integrationTest {
        java {
            srcDirs "src/integrationTest/java"

            compileClasspath += sourceSets.main.output
            runtimeClasspath = sourceSets.main.output
        }
        resources {
            srcDir "src/integrationTest/resources"
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    runtime.exclude group: "org.slf4j", module: "slf4j-simple"

    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6"
    implementation "org.openapitools:openapi-generator-gradle-plugin:7.12.0"
    implementation "org.liquibase:liquibase-core"
    implementation "jakarta.validation:jakarta.validation-api:3.1.1"
    implementation "org.hibernate.validator:hibernate-validator:8.0.2.Final"
    implementation "org.springframework.boot:spring-boot-starter-logging:3.4.4"

    compileOnly "org.projectlombok:lombok"
    runtimeOnly "org.postgresql:postgresql"
    annotationProcessor "org.projectlombok:lombok"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "com.h2database:h2"

    integrationTestImplementation "org.testcontainers:junit-jupiter:1.20.6"
    integrationTestImplementation "org.testcontainers:postgresql:1.20.6"
    integrationTestImplementation "org.springframework.boot:spring-boot-starter-test"
    integrationTestImplementation("org.testcontainers:testcontainers:1.20.6") {
        exclude group: 'junit', module: 'junit'
    }

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    integrationTestImplementation platform("org.junit:junit-bom:5.10.0")
    integrationTestImplementation "org.junit.jupiter:junit-jupiter"

    integrationTestCompileOnly "org.projectlombok:lombok"
    integrationTestAnnotationProcessor "org.projectlombok:lombok"
}

tasks.register("createChangeDir") {
    group = "Liquibase"
    description = "Creates an empty SQL file for Liquibase migration"

    doLast {
        def currentYear = Year.now().value
        def filename = "${System.currentTimeMillis()}-${project.id}.sql"
        def changelogDir = Paths.get("src/main/resources/db/changelog/${currentYear}")
        def newFilePath = changelogDir.resolve(filename)

        if (!Files.exists(changelogDir)) {
            Files.createDirectories(changelogDir)
        }

        Files.createFile(newFilePath)

        def file = file(newFilePath)
        def fileContent = "-- liquibase formatted sql logicalFilePath:classpath:/db/changelog/${currentYear}/${filename} \n-- changeset author:edgsel"
        def writer = new FileWriter(file)

        writer.write(fileContent)
        writer.close()
        logger.quiet("Created a new file: $file")
    }
}

tasks.named("test") {
    useJUnitPlatform()
}

tasks.register('integrationTest', Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    useJUnitPlatform()
}
